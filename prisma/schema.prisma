// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // uses connection pooling   -> main connetion file
  // directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  // directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  // shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model Admin {
  id        String    @id @default(uuid())
  username  String    @unique
  firstName String
  lastName  String
  email     String    @unique
  password  String
  role      AdminRole @default(MAIN)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum AdminRole {
  MAIN
  SUB
}

model User {
  id        String    @id @default(uuid())
  phone     String    @unique
  addresses Address[]
  orders    Order[]
}

model Order {
  id        String    @id @default(uuid())
  products  Product[]
  orderType OrderType @default(PENDING)
  User      User?     @relation(fields: [userId], references: [id])
  userId    String?
}

enum OrderType {
  PENDING
  FULLFILL
}

model Address {
  id           String      @id @default(uuid())
  label        String
  firstName    String
  lastName     String
  emailAddress String
  division     String
  district     String
  thana        String
  postal       String
  landMark     String
  roadNumber   String
  houseNumber  String
  flatNumber   String
  addressType  AddressType @default(BILLING)
  User         User?       @relation(fields: [userId], references: [id])
  userId       String?
}

enum AddressType {
  BILLING
  SHIPPING
}

model Banner {
  id        String   @id @default(uuid())
  img       String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id         String   @id @default(uuid())
  name       String   @unique
  img        String?
  popularity Int?     @default(0)
  brands     Brand[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Brand {
  id         String    @id @default(uuid())
  name       String
  img        String?
  products   Product[]
  popularity Int?      @default(0)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId String?
}

model Product {
  id                String   @id @default(uuid())
  name              String
  popularity        Int?     @default(0)
  sku               String
  img               String
  model             String
  price             Int
  features          String[]
  stockAvailable    Boolean
  discount          Float
  emiDuration       Int
  exchangeOffer     Int
  offerValidityTill String
  warrentyOn        String
  warrentyType      String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  Order             Order?   @relation(fields: [orderId], references: [id])
  orderId           String?
  brand             Brand?   @relation(fields: [brandId], references: [id])
  brandId           String?
}
